@page "/"
@using UploadFilesLibrary;
@using BlazorFileUpload.Data;
@inject ISqlDataAccess sql;
@inject IConfiguration config;

<PageTitle>Upload Demo App</PageTitle>

<h1>Upload Demo</h1>

<EditForm Model="newCustomer" OnValidSubmit="SubmitForm">
    <div>
        <label for="firstName">First Name:</label>
        <InputText id="firstName" class="form-control" @bind-Value=newCustomer.FirstName />
    </div>
    <div>
        <label for="lastName">Last Name:</label>
        <InputText id="lastName" class="form-control" @bind-Value=newCustomer.LastName />
    </div>
    <div>
        <label for="profilePicture">Profile Picture:</label>
        <InputFile OnChange="LoadFiles" class="form-control" multiple accept=".jpg,.jpeg,.txt" />
    </div>
    <button class="btn btn-primary mt-3" type="submit">Criar Cliente</button>
</EditForm>


@if (errors.Any())
{
    <h2>Erros:</h2>
    <ul class="text-danger">
        @foreach (var error in errors)
        {
            <li>@error</li>
        }
    </ul>
}

@if (customers is not null)
{
    <h2>Existing Customers</h2>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Profile Picture</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in customers)
            {
                <tr>
                    <td>@c.Id</td>
                    <td>@c.FirstName</td>
                    <td>@c.LastName</td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(c.FileName))
                        {
                            <img src="@CreateWebPath(c.FileName)" width="100" height="100" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private long maxFileSize = 1024 * 1024 * 3;
    private List<string> errors = new();
    private Customer newCustomer = new();
    private IBrowserFile? file;
    private List<Customer>? customers;

    private async Task LoadCustomers()
    {
        customers = await sql.LoadData<Customer>("dbo.spCustomer_GetAll", "Default", null);
    }

    private string CreateWebPath(string relativePath)
    {
        return Path.Combine(config.GetValue<string>("WebStorageRoot")!, relativePath);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task SubmitForm()
    {
        errors.Clear();
        try
        {
            string relativePath = await CaptureFile();
            newCustomer.FileName = relativePath;

            await sql.SaveData("dbo.spCustomer_Insert", "Default", newCustomer);

            newCustomer = new();
            file = null;
            errors.Clear();
            await LoadCustomers();
        }
        catch (Exception ex)
        {
            errors.Add($"Erro: {ex.Message}");
        }
    }

    private async Task LoadFiles(InputFileChangeEventArgs e) => file = e.File;

    private async Task<string> CaptureFile()
    {
        if (file is null)
        {
            return "";
        }

        try
        {
            string newFileName = Path.ChangeExtension(Path.GetRandomFileName(), Path.GetExtension(file.Name));
            string relativePath = Path.Combine("foo", newFileName);

            Directory.CreateDirectory(Path.Combine(config.GetValue<string>("FileStorage")!, "foo"));
            string path = Path.Combine(config.GetValue<string>("FileStorage")!, "foo", newFileName);
            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"Arquivo: {file.Name}. Erro: {ex.Message}");
            throw;
        }
    }
}